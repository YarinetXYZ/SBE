Write-Host @"
#########################################################################
#  ____ _____ ___ ____   _____ _   _ _____ ___  ____   ____ _____ ____  #
# / ___|_   _|_ _/ ___| | ____| \ | |  ___/ _ \|  _ \ / ___| ____|  _ \ #
# \___ \ | |  | | |  _  |  _| |  \| | |_ | | | | |_) | |   |  _| | |_) |#
#  ___) || |  | | |_| | | |___| |\  |  _|| |_| |  _ <| |___| |___|  _ < #
# |____/ |_| |___\____| |_____|_| \_|_|   \___/|_| \_\\____|_____|_| \_\#
#                                                                       #
#########################################################################
By Yarinet v1.0
"@

### LOGGING ###
$LogFile = "C:\Temp\STIG-Remediation.log"
if (!(Test-Path $logFile)) { New-Item -ItemType File -Path $LogFile -Force | Out-Null }

function Write-Log {
    param ($message, $level = "Information")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp [$level] $message"
    Add-Content -Path $LogFile -Value $logEntry
}

### REGISTRY KEY REMEDIATION FUNCTION ###
function Apply-RegistryFix {
    param ($id, $path, $name, $value)
    try {
        if (!(Test-Path $path)) {
            New-Item -Path $path -Force | Out-Null
            Write-Log "$($id): Created missing registry path $path"
        }
        Set-ItemProperty -Path $path -Name $name -Value $value
        Write-Log "$($id): Set $name to $value in $path"
        $global:Results += @{ID=$id; Message="Set $name to $value in $path"; Status="Success"}
    } catch {
        Write-Log "$($id): Failed to set registry key. Error: $_" "ERROR"
        $global:Results += @{ID=$id; Message="Failed to set registry key in $path"; Status="Fail"}
    }
}

### SERVICE REMEDIATION FUNCTIOn ###
function Apply-ServiceFix {
    param ($id, $name, $state, $startupType)
    try {
        Set-Service -Name $name -StartupType $startupType
        if ($state -eq "Stopped") {
            Stop-Service -Name $name -Force
        }
        Write-Log "$($id): Set service '$name' to $startupType, state $state"
        $global:Results += @{ID=$id; Message="Set service '$name' to $startupType, state $state"; Status="Success"}
    } catch {
        Write-Log "$($id): Failed to configure service '$name'. Error: $_" "ERROR"
        $global:Results += @{ID=$id; Message="Failed to configure service '$name'"; Status="Fail"}
    }
}

### COMMAND REMEDIATION FUNCTION ###
function Apply-CommandFix {
    param ($id, $command)
    try {
        Invoke-Expression $command
        Write-Log "$($id): Ran command: $command"
        $global:Results += @{ID=$id; Message="Ran command: $command"; Status="Success"}
    } catch {
        Write-Log "$($id): Failed to run command. Error: $_" "ERROR"
        $global:Results += @{ID=$id; Message="Failed to run command"; Status="Fail"}
    }
}

### REMEDIATIONS ###
$Remediations = @(
    @{ ID = "V-220829"; Type = "Registry"; Path = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer'; Name = "NoAutoPlay"; Value = 1 },
    @{ ID = "V-220827"; Type = "Registry"; Path = 'HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer'; Name = "NoAutoPlayfornonVolume"; Value = 1 } 
    ##@{ ID = "V-XXXXX"; Type = "Service"; Name = "wuauserv"; State = "Stopped"; StartupType = "Disabled" },
    ##@{ ID = "V-YYYYY"; Type = "Command"; Command = "icacls C:\SensitiveFolder /inheritance:r" }
)

$Results = @()

### REMEDIATION ENFORCER LOOP ###
foreach ($remediation in $Remediations) {
    switch ($remediation.Type) {
        "Registry" { Apply-RegistryFix -id $remediation.ID -path $remediation.Path -name $remediation.Name -value $remediation.Value }
        "Service"  { Apply-ServiceFix -id $remediation.ID -name $remediation.Name -state $remediation.State -startupType $remediation.StartupType }
        "Command"  { Apply-CommandFix -id $remediation.ID -command $remediation.Command }
    }
}

### RESULTS - SUCCESS // FAIL OUTPUT ###
foreach ($result in $Results) {
    $color = if ($result.Status -eq "Success") { "Green" } else { "Red" }
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "$timestamp [Information] $($result.ID): $($result.Message)" -ForegroundColor $color
}


Write-Host "Press any key to close this window..." -ForegroundColor Yellow
[System.Console]::ReadKey($true)| Out-Null
Stop-Process -Id $PID
